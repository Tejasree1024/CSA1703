print("192371043-o.tejasree")

import itertools
def calculate_path_cost(graph, path):
    cost = 0
    for i in range(len(path) - 1):
        cost += graph[path[i]][path[i+1]]
    cost += graph[path[-1]][path[0]]  
    return cost


def tsp(graph):
    cities = list(graph.keys())
    min_path = None
    min_cost = float('inf')

    for perm in itertools.permutations(cities):
        cost = calculate_path_cost(graph, perm)
        if cost < min_cost:
            min_cost = cost
            min_path = perm

    return min_path, min_cost


graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}


path, cost = tsp(graph)
print("Shortest Path:", " -> ".join(path), "->", path[0])
print("Minimum Cost:", cost)
