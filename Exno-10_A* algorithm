print("192371043-o.tejasree")a

import heapq

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, end):
    h, w = len(grid), len(grid[0])
    open_set = [(0 + heuristic(start, end), 0, start, [])]
    visited = set()

    while open_set:
        f, g, pos, path = heapq.heappop(open_set)
        if pos in visited:
            continue
        path = path + [pos]
        if pos == end:
            return path
        visited.add(pos)
        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            x, y = pos[0] + dx, pos[1] + dy
            if 0 <= x < h and 0 <= y < w and grid[x][y] == 0:
                heapq.heappush(open_set, (g+1 + heuristic((x, y), end), g+1, (x, y), path))
    return None

# Example
grid = [
    [0,0,0,0],
    [1,1,0,1],
    [0,0,0,0],
    [0,1,1,0]
]
start, end = (0,0), (3,3)
print(astar(grid, start, end))
